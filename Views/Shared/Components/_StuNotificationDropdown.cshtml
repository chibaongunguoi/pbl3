@model NotificationViewModel

<a id="notification-info" class="text-dark user-link notification-link" style="cursor: pointer; text-decoration: none; display: inline-block; position: relative;">
    <i class="bi bi-bell" style="font-size: 1.5rem; color: #666;"></i>
    @if (Model.UnreadCount > 0)
    {
        <div class="notification-badge" style="position: absolute; top: -8px; right: -8px; background: #dc3545; color: white; border-radius: 50%; width: 20px; height: 20px; font-size: 0.75rem; display: flex; align-items: center; justify-content: center; font-weight: 600; box-shadow: 0 2px 4px rgba(0,0,0,0.2);">
            @Model.UnreadCount
        </div>
    }
</a>
<div class="noti-dropdown" id="notification-dropdown" style="display:none; position:absolute; top:calc(100% + 5px); right:0; z-index:1000; background-color: white; border: 1px solid #ddd; min-width: 250px; box-shadow: 0 2px 5px rgba(0,0,0,0.1);">            
    <div id="notificationContent" style="display:none; position: absolute; top: calc(100% + 10px); right: 0; width: 320px; background-color: white; border: 1px solid rgba(0,0,0,0.1); border-radius: 8px; box-shadow: 0 4px 12px rgba(0,0,0,0.15); z-index: 9999;">
    <div class="notification-content-wrapper">
        <div class="notification-header" style="padding: 12px 15px; border-bottom: 1px solid #eee; background-color: #f8f9fa;">
            <div class="header-content">
                <h6 class="header-title" style="margin: 0; font-size: 0.95rem; color: #444;">
                    <i class="bi bi-bell me-2"></i>
                    Thông báo
                </h6>
                @if (Model.UnreadCount > 0)
                {
                    <span class="unread-count" style="background: #e7f3ff; color: #0066cc; padding: 3px 8px; border-radius: 12px; font-size: 0.8rem;">@Model.UnreadCount mới</span>
                }
            </div>
        </div>
        <div class="notification-item-list">
            @if (Model.Notifications.Count == 0)
            {                <div class="empty-notifications" style="padding: 30px 20px; text-align: center; color: #666;">
                    <div class="empty-icon" style="margin-bottom: 12px;">
                        <i class="bi bi-bell-slash" style="font-size: 2rem; color: #ccc;"></i>
                    </div>
                    <p class="empty-text" style="margin: 0 0 4px 0; font-size: 0.95rem;">Không có thông báo nào</p>
                    <small class="empty-subtext" style="color: #888; font-size: 0.85rem;">Khi có thông báo mới, chúng sẽ hiển thị ở đây</small>
                </div>
            }
            else
            {
                foreach (var notif in Model.Notifications)
                {
                    var isUnread = notif.IsRead == 0;                    
                    <div class="notification-item @(isUnread ? "unread" : "read")" data-id="@notif.Id" tabindex="0"
                        role="button" aria-pressed="false" onclick="markAsRead(@notif.Id)" 
                        style="padding: 10px 15px; display: flex; align-items: flex-start; gap: 12px; cursor: pointer; transition: background-color 0.2s; border-bottom: 1px solid #eee; @(isUnread ? "background-color: #f8f9fa;" : "")">
                        @if (isUnread)
                        {
                            <span class="unread-indicator"
                                style="margin-top: 6px; flex-shrink: 0; width: 6px; height: 6px; background: #0066cc; border-radius: 50%;"></span>
                        }
                        <div class="notification-icon-sm" style="width: 32px; height: 32px; border-radius: 50%; background: #f0f4f8; display: flex; align-items: center; justify-content: center; flex-shrink: 0;">
                            @{
                                string iconClass = "bi-info-circle";
                                string iconColor = "#666";
                                if (notif.Message.Contains("từ chối") || notif.Message.Contains("Từ chối"))
                                {
                                    iconClass = "bi-x-circle";
                                    iconColor = "#dc3545";
                                }
                                else if (notif.Message.Contains("chấp nhận") || notif.Message.Contains("Chấp nhận"))
                                {
                                    iconClass = "bi-check-circle";
                                    iconColor = "#198754";
                                }
                            }
                            <i class="bi @iconClass" style="color: @iconColor; font-size: 1.1rem;"></i>
                        </div>
                        <div class="notification-content" style="flex: 1; min-width: 0;">
                            <div class="notification-message" style="font-size: 0.9rem; color: #444; margin-bottom: 4px; line-height: 1.4;">@notif.Message</div>
                            <div class="notification-time" style="font-size: 0.8rem; color: #888;">
                                <i class="bi bi-clock me-1"></i>
                                @notif.CreatedAt.ToString("HH:mm dd/MM/yyyy")
                            </div>
                        </div>
                    </div>
                }
            }
        </div>        <div class="notification-footer" style="padding: 8px; text-align: center; border-top: 1px solid #eee; background-color: #f8f9fa;"> 
            <a class="view-all-notifications" href="/Student/Notifications" style="color: #0066cc; text-decoration: none; font-size: 0.9rem; display: block; padding: 4px;">
                Xem tất cả thông báo
                <i class="bi bi-chevron-right ms-1"></i>
            </a>
        </div>
    </div>
</div>
</div>

<script>    // Position the notification dropdown as a popup
    document.addEventListener('DOMContentLoaded', function () {
        const notificationLink = document.getElementById('notification-info');
        const notificationDropdown = document.getElementById('notification-dropdown');
        const notificationContent = document.getElementById('notificationContent');

        if (notificationLink && notificationDropdown) {
            console.log("Found notification elements, setting up click handler");

            // Replace the dropdown content
            notificationDropdown.innerHTML = notificationContent.innerHTML;
            notificationContent.remove();

            // Custom positioning for the dropdown
            notificationLink.addEventListener('click', function (e) {
                console.log("Notification icon clicked");
                e.preventDefault();
                e.stopPropagation();

                // Toggle dropdown visibility
                if (notificationDropdown.style.display === 'none' || !notificationDropdown.style.display) {
                    console.log("Showing dropdown");
                    notificationDropdown.style.display = 'block';                    // Calculate position based on the notification link
                    const rect = notificationLink.getBoundingClientRect();
                    
                    // Position dropdown based on screen position
                    const windowWidth = window.innerWidth;
                    const dropdownWidth = 350; // Same as the width in CSS

                    // Always position relative to the notification link
                    notificationDropdown.style.position = 'fixed';
                    notificationDropdown.style.top = `${rect.bottom + 5}px`;

                    // Check if we need to adjust horizontal position
                    if (rect.right + dropdownWidth > windowWidth) {
                        // Position left-aligned if near right edge
                        notificationDropdown.style.right = 'auto';
                        notificationDropdown.style.left = `${Math.max(0, windowWidth - dropdownWidth)}px`;
                    } else {
                        // Position right-aligned with the notification icon
                        notificationDropdown.style.left = 'auto';
                        notificationDropdown.style.right = `${windowWidth - rect.right}px`;
                    }

                    // Close any other open dropdowns
                    const userDropdown = document.getElementById('user-dropdown');
                    if (userDropdown && userDropdown.style.display === 'block') {
                        userDropdown.style.display = 'none';
                    }
                } else {
                    console.log("Hiding dropdown");
                    notificationDropdown.style.display = 'none';
                }
            });            // Close dropdown when clicking outside
            document.addEventListener('click', function (e) {
                if (!notificationLink.contains(e.target) && !notificationDropdown.contains(e.target)) {
                    notificationDropdown.style.display = 'none';
                }
            });
        }
    });

    function markAsRead(notificationId) {
        // Make AJAX call to mark notification as read
        fetch('/Student/MarkNotificationRead', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
            },
            body: 'id=' + notificationId
        }).then(response => {
            if (response.ok) {
                // Use a more robust selector to find the notification item
                const notificationItem = document.querySelector(`.notification-item[data-id="${notificationId}"]`);
                if (notificationItem && notificationItem.classList.contains('unread')) {
                    notificationItem.classList.remove('unread');
                    notificationItem.classList.add('read');
                    const indicator = notificationItem.querySelector('.unread-indicator');
                    if (indicator) indicator.remove();

                    // Update badge count
                    const badge = document.querySelector('.notification-badge');
                    const unreadCountElem = document.querySelector('.unread-count');
                    if (badge && unreadCountElem) {
                        const currentCount = parseInt(badge.textContent);
                        if (currentCount > 1) {
                            badge.textContent = currentCount - 1;
                            unreadCountElem.textContent = (currentCount - 1) + ' mới';
                        } else {
                            // If this was the last unread notification, hide the badge and unread count
                            if (badge.parentNode) badge.parentNode.removeChild(badge);
                            if (unreadCountElem.parentNode) unreadCountElem.parentNode.removeChild(unreadCountElem);
                        }
                    }
                }

                // Optional: Redirect to the relevant page if the notification has a link
                // If you want to support redirect, add a property to Notification and set data-redirect in the markup
                if (notificationItem && notificationItem.getAttribute('data-redirect')) {
                    window.location.href = notificationItem.getAttribute('data-redirect');
                }
            }
        }).catch(error => { console.error('Error marking notification as read:', error); });
    }

</script>
