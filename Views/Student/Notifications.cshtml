@model List<Notification>

@{
    Layout = "Layout/_StudentManageLayout";
}

<link href="~/css/Notification.css" rel="stylesheet" />
<link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.0/font/bootstrap-icons.css" rel="stylesheet">

<div class="container-fluid mt-4">
    <div class="notifications-page">
        <div class="page-header">
            <div class="header-content">
                <h1 class="page-title">
                    <i class="bi bi-bell-fill me-3"></i>
                    Thông báo của bạn
                </h1>
                <p class="page-subtitle">Quản lý tất cả thông báo và cập nhật quan trọng</p>
            </div>
            <div class="header-stats">
                <div class="stat-card">
                    <div class="stat-number">@Model.Count</div>
                    <div class="stat-label">Tổng thông báo</div>
                </div>
                <div class="stat-card unread-stat">
                    <div class="stat-number">@Model.Count(n => n.IsRead == 0)</div>
                    <div class="stat-label">Chưa đọc</div>
                </div>
            </div>
        </div>

        <div class="notifications-container">
            @if (Model.Count == 0)
            {
                <div class="empty-state">
                    <div class="empty-icon">
                        <i class="bi bi-bell-slash"></i>
                    </div>
                    <h3 class="empty-title">Không có thông báo nào</h3>
                    <p class="empty-description">
                        Khi có thông báo mới từ hệ thống hoặc giảng viên, chúng sẽ xuất hiện ở đây.
                    </p>
                    <a href="/Student/Course" class="btn btn-primary">
                        <i class="bi bi-book me-2"></i>
                        Xem khóa học
                    </a>
                </div>
            }
            else
            {
                <div class="notifications-list">
                    @foreach (var notification in Model)
                    {
                        <div class="notification-card @(notification.IsRead == 0 ? "unread" : "read")" 
                             data-notification-id="@notification.Id">
                            <div class="notification-indicator">
                                @if (notification.IsRead == 0)
                                {
                                    <div class="unread-dot pulse"></div>
                                }
                                else
                                {
                                    <i class="bi bi-check-circle-fill read-icon"></i>
                                }
                            </div>
                            
                            <div class="notification-icon-container">
                                <div class="notification-type-icon">
                                    <i class="bi bi-info-circle-fill"></i>
                                </div>
                            </div>
                            
                            <div class="notification-content">
                                <div class="notification-message">
                                    @notification.Message
                                </div>
                                <div class="notification-meta">
                                    <span class="notification-time">
                                        <i class="bi bi-clock me-1"></i>
                                        @notification.CreatedAt.ToString("dd/MM/yyyy 'lúc' HH:mm")
                                    </span>
                                    <span class="notification-status">
                                        @if (notification.IsRead == 0)
                                        {
                                            <span class="status-badge unread-badge">Chưa đọc</span>
                                        }
                                        else
                                        {
                                            <span class="status-badge read-badge">Đã đọc</span>
                                        }
                                    </span>
                                </div>
                            </div>
                            
                            @if (notification.IsRead == 0)
                            {
                                <div class="notification-actions">
                                    <button type="button" 
                                            class="btn-mark-read" 
                                            onclick="markAsRead(@notification.Id)"
                                            title="Đánh dấu đã đọc">
                                        <i class="bi bi-check2"></i>
                                    </button>
                                </div>
                            }
                        </div>
                    }
                </div>

                @if (Model.Any(n => n.IsRead == 0))
                {
                    <div class="bulk-actions">
                        <button type="button" class="btn btn-outline-primary" onclick="markAllAsRead()">
                            <i class="bi bi-check2-all me-2"></i>
                            Đánh dấu tất cả đã đọc
                        </button>
                    </div>
                }
            }
        </div>
    </div>
</div>


<script>
function markAsRead(notificationId) {
    fetch('/Student/MarkNotificationRead', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
        },
        body: 'id=' + notificationId
    }).then(response => {
        if (response.ok) {
            // Update the notification card
            const notificationCard = document.querySelector(`[data-notification-id="${notificationId}"]`);
            if (notificationCard) {
                notificationCard.classList.remove('unread');
                notificationCard.classList.add('read');
                
                // Update indicator
                const indicator = notificationCard.querySelector('.notification-indicator');
                indicator.innerHTML = '<i class="bi bi-check-circle-fill read-icon"></i>';
                
                // Update status badge
                const statusBadge = notificationCard.querySelector('.status-badge');
                statusBadge.className = 'status-badge read-badge';
                statusBadge.textContent = 'Đã đọc';
                
                // Remove actions
                const actions = notificationCard.querySelector('.notification-actions');
                if (actions) actions.remove();
                
                // Update stats
                updateStats();
            }
        }
    }).catch(error => {
        console.error('Error marking notification as read:', error);
    });
}

function markAllAsRead() {
    const unreadNotifications = document.querySelectorAll('.notification-card.unread');
    const promises = [];
    
    unreadNotifications.forEach(card => {
        const notificationId = card.getAttribute('data-notification-id');
        promises.push(
            fetch('/Student/MarkNotificationRead', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                },
                body: 'id=' + notificationId
            })
        );
    });
    
    Promise.all(promises).then(responses => {
        const allSuccessful = responses.every(response => response.ok);
        if (allSuccessful) {
            location.reload();
        }
    }).catch(error => {
        console.error('Error marking all notifications as read:', error);
    });
}

function updateStats() {
    const unreadCards = document.querySelectorAll('.notification-card.unread');
    const unreadCount = unreadCards.length;
    
    // Update stats
    const unreadStatNumber = document.querySelector('.unread-stat .stat-number');
    if (unreadStatNumber) {
        unreadStatNumber.textContent = unreadCount;
    }
    
    // Hide bulk actions if no unread notifications
    if (unreadCount === 0) {
        const bulkActions = document.querySelector('.bulk-actions');
        if (bulkActions) {
            bulkActions.style.display = 'none';
        }
    }
}
</script>
}
</div>
</div>
